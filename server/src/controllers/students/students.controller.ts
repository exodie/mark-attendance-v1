import {Request, Response} from "express";

import axios from "axios";

import {allStudentsList} from "../../constants.js";
import {getCurrentDateNumber} from "../../tools/date.js";

export class StudentsController {
    public async studentsAuth(req: Request, res: Response) {
        try {
            const {login, password} = req.body;

            console.log(`Try authorization to: [${login}] [${password}]`);

            const date = new Date();
            const currentHours = date.getUTCHours() + 4;
            const currentMinutes = date.getUTCMinutes();
            const currentDay: number = date.getDay();
            const days: string[] = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
            const getDay: string = days[currentDay];

            switch (login) {
                case "01":
                    if (password === process.env.HEAD_PASS || password === "yAMVq~uJGodu") {
                        if (getDay === "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" || getDay === "–°—É–±–±–æ—Ç–∞") {
                            return res.send({message: "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, –∏–¥–∏ –æ—Ç–¥—ã—Ö–∞–π!", status: false});
                        }

                        return res.status(200).send({
                            message: "–û –ø—Ä–∏–≤–µ—Ç, –¥–∞–≤–Ω–æ —Ç–µ–±—è –Ω–µ –≤–∏–¥–µ–ª üòé?!",
                            status: true,
                        });
                    }

                    res.send({
                        message: "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!",
                        status: false,
                    });
                    break;

                case "02":
                    if (password === process.env.DEP_HEAD_PASS || password === "nZ6GybnkVxc$") {
                        if (getDay === "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" || getDay === "–°—É–±–±–æ—Ç–∞") {
                            return res.send({message: "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, –∏–¥–∏ –æ—Ç–¥—ã—Ö–∞–π!", status: false});
                        }

                        return res.status(200).send({
                            message: "–ü—Ä–∏–≤–µ—Ç, –∞ –∫–∞–∫–∞—è –ø–∞—Ä–∞ —Å–µ–π—á–∞—Å –≤–æ–æ–±—â–µ –∏–¥–µ—Ç ü§î?!",
                            status: true,
                        });
                    }

                    res.send({
                        message: "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!",
                        status: false,
                    });
                    break;

                case "000":
                    if (password === process.env.ADMIN_PASS || password === "367946") {
                        return res.status(200).send({
                            message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üë®‚Äçüíª.",
                            status: true
                        });
                    }

                    res.send({
                        message: "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!",
                        status: false,
                    });

                    break;

                default:
                    break;
            }
        } catch (e) {
            console.log(e);
        }
    }

    public getAllStudetsList(req: Request, res: Response) {
        try {
            res.status(200).send(allStudentsList);
        } catch (e) {
            console.log(e);
        }
    }

    public async setSelectedStudents(req: Request, res: Response) {
        try {
            const lists: number[] = req.body;

            const values: { id: number, name: string, status: boolean }[] = [];

            if (lists.length > 0) {
                console.log(lists);

                allStudentsList.map((studValue) => {
                    lists.map((listValue) => {
                        if (studValue.id === listValue) {
                            values.push({
                                id: studValue.id,
                                name: studValue.name,
                                status: true
                            });
                        }
                    });
                });


                const numberInList = values.map((item) => item.id);
                const studentsName = values.map((item) => item.name);

                const date = new Date();

                const DateOptions = {
                    currentDay: date.getDay(),
                    currentDate: getCurrentDateNumber(date.getDate()),
                    currentMonth: getCurrentDateNumber(date.getMonth() + 1),
                    currentYear: date.getFullYear(),
                    currentHours: getCurrentDateNumber(date.getUTCHours() + 4),
                    currentMinutes: getCurrentDateNumber(date.getUTCMinutes()),
                }

                const currentTime = `${DateOptions.currentHours}:${DateOptions.currentMinutes}`;

                const days: string[] = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
                const getDay: string = days[DateOptions.currentDay];

                const msg = `–î–∞—Ç–∞: ${DateOptions.currentDate}.${DateOptions.currentMonth}.${DateOptions.currentYear} - ${getDay} | –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime} | –ù–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ: ${numberInList} | –§–ò–û: ${studentsName}`;

                await axios.post(`https://api.vk.com/method/messages.send?user_id=${626737025}&random_id=0&message=${msg}&v=5.131&access_token=${process.env.VK_SECRET_ACCESS_TOKEN}`);

                return res.send({message: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Å–∫–æ—Ä–æ –¥–æ–π–¥—É—Ç –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!", status: true});
            } else {
                return res.send({
                    message: "–£–ø—Å, –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!",
                    status: false
                });
            }
        } catch (e) {
            console.log(e);
        }
    }
}